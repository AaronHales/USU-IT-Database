// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// id Int @id @default(autoincrement())
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt

model User {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String   @unique
  password_hash String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Department {
  id                 Int              @id @default(autoincrement())
  name               String
  abbreviation       String?
  departmentCode     String?
  extension          Int?
  email              String?
  subDepartments     Department[]     @relation("subdeparments")
  parentDepartment   Department?      @relation("subdeparments", fields: [parentDepartmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentDepartmentId Int?
  responsibilities   Responsibility[]
  techs              DesktopSupport[]
  commonIssues       CommonIssue[]    @relation("departmentIssues")
  software           Software[]       @relation("software-department")
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Responsibility {
  id             Int        @id @default(autoincrement())
  responsibility String
  department     Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departmentId   Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model DesktopSupport {
  id            Int          @id @default(autoincrement())
  name          String
  deskPhone     Int?
  cellPhone     Int?
  email         String?
  commonIssue   CommonIssue[] @relation("issues")
  software      Software[]
  department    Department[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model CommonIssue {
  id           Int              @id @default(autoincrement())
  problem      String?
  helpers      DesktopSupport[] @relation("issues")
  solution     String?
  resources    Resource[]
  departments   Department[]    @relation("departmentIssues")
  departmentId Int
  software     Software?        @relation(fields: [softwareId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  softwareId   Int?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Resource {
  id            Int          @id @default(autoincrement())
  incidents     Incident[]
  link          String?
  commonIssue   CommonIssue? @relation(fields: [commonIssueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commonIssueId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Incident {
  id         Int       @id @default(autoincrement())
  number     String
  link       String
  resource   Resource? @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resourceId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Software {
  id           Int              @id @default(autoincrement())
  name         String
  support      DesktopSupport[]
  commonIssues CommonIssue[]
  department   Department[]     @relation("software-department")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}
